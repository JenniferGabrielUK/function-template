#include <iostream>
#include <string>

template <typename T>
T min(T a, T b) {
    return (a < b) ? a : b;
}

template <typename T1, typename T2>
void func(T1 a, T2 b) {
    std::cout << a << " " << b << std::endl;
}

struct Person {
    std::string name;
    int age;
    bool operator < (const Person& ref_rhs) const {
        return this->age < ref_rhs.age;
    }
};

int main()
{
    Person p1{ "Jenny", 50 };
    Person p2{ "Sam", 30 };

    Person p3 = min(p1, p2); //p3 = the person object with the least age ie p2 
                             //we therefore need to write an overloaded < operator
                             //in the Person struct to allow 
    std::cout << p3.name << " is younger." << std::endl; //Sam is younger.
                            //the overloaded comparison operator allows for the min template function
                            //to compare the ages of both Person struct objects
    std::cout << min<int>(2,3) << std::endl; //calls min template function and derives <int> 2 as T a and 3 as T b, then prints 2 as that is the lowest.
    std::cout << min(2, 3) << std::endl; // compiler auto deduces the type as an int as 2 & 3 are passed in the the template function.
    std::cout << ('A', 'B') << std::endl; //A
    std::cout << min(12.5, 9.2) << std::endl; //9.2
    std::cout << min(5 + 2 * 2, 7 + 40) << std::endl; //prints 9 as the template returns the smaller of the two.
    
    func<int, int>(10, 20); //similar examples to above except this template needs two typenames passed in
    func(10, 20);
    func<char, double>('A', 12.4);
    func('A', 12.5);
    func(1000, "Testing");
    func(2000, std::string{ "Jenny" });
    
    return 0;
}
